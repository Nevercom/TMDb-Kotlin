{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TMDb-Kotlin \u00b6 This is the TMDb API documentation page for the TMDb wrapper TMDb-Kotlin written in and for Kotlin. I\u2019ve created the library for Android apps primarily but it can be also used in any Gradle project. Most of the functionality and callbacks are implemented (except some account related calls). The library is therefore WIP, so there might be breaking changes in the future (but I doubt it). The library is built on top of Retrofit2 for networking. If you\u2019ve got questions, suggestions or encounter any issues feel free to contact me via GitHub issues . I\u2019d be happy to help ;) Setup \u00b6 Import into your project \u00b6 This library uses JitPack.io so you\u2019ve to add the repo to your projects gradle file: repositories { maven { url \"https://jitpack.io\" } } Then, on app level add the library: dependencies { implementation \"com.github.vkay94:TMDb-Kotlin:{latest_version}\" // This module uses the ThreetenABP library to ensure LocalDate support in // Android versions below API 26 so you should use this as well for // using dates. implementation \"com.jakewharton.threetenabp:threetenabp:1.3.0\" } Initialize the instance \u00b6 Basic initialization: TMDb . init ( API_KEY [, V4_AUTH_KEY ]) // [] = optional In Android applications it is best-practice to initialize the instance directly within App to make use of Kotlin\u2019s objects, so the instance can be used in the whole app directly. App.kt class App : Application () { override fun onCreate () { TMDb . init ( API_KEY ) // or TMDb.init(YOUR_API_KEY, V4_AUTH_KEY) for authentication } } AndroidManifest.xml <manifest ... > <uses-permission android:name= \"android.permission.INTERNET\" /> <application android:name= \".App\" ... > </application> </manifest> Making requests \u00b6 At the moment all calls are suspended and require to be called in Kotlin Coroutines. An overview of how to use them can be found here: Composing suspending functions . They\u2019re also wrapped in NetworkResponse s so you can react for errors easily or access the data directly. Examples \u00b6 Searching with error handling \u00b6 There are four cases which the response can take value of: Success , ServerError , NetworkError and UnknownError . For more info you should take a look here . fun main () = runBlocking { TMDb . init ( \"YOUR_API_KEY\" ) when ( val response = TMDb . searchService . tv ( \"Black Clover\" )) { // Type: NetworkResponse<TmdbPage<TmdbShow.Slim>, TmdbError.DefaultError> is NetworkResponse . Success -> { val searchPage : TmdbPage < TmdbShow . Slim > = response . body if ( searchPage . totalResults > 0 ) { println ( \"First result's title: ${searchPage.results[0].title}\" ) } } is NetworkResponse . ServerError -> { val errorBody : TmdbErrorResponse ? = response . body println ( \"ServerError: Message = ${errorBody?.message}\" ) } is NetworkResponse . NetworkError -> { val error : IOException = response . error println ( \"NetworkError: Message = ${error.message}\" ) } is NetworkResponse . UnknownError -> { val error : Throwable = response . error println ( \"UnknownError: Message = ${error.message}\" ) } } } Searching with direct access \u00b6 You can also access the response directly without checking for the NetworkResponse type by calling invoke() . In this case the object might by null : fun main () = runBlocking { TMDb . init ( \"YOUR_API_KEY\" ) val searchPage : TmdbPage < TmdbShow . Slim >? = TMDb . searchService . tv ( \"Black Clover\" ). invoke () searchPage ?. let { if ( searchPage . totalResults > 0 ) { println ( \"First result: ${searchPage.results[0].title}\" ) } } } Next steps \u00b6 This introduction is pretty briefly. For some more practice scenarios you can either look into the Recipes page on the left or into the tests folder on Github here . Used libraries and thanks \u00b6 Retrofit2 by Square Moshi by Square NetworkResponseAdapter by Kshitij Chauhan ThreeTenABP by Jake Wharton Thanks go to The Movie Database for the API Uwe Trottmann\u2019s tmdb-java for the basic idea and some structuring elements Kshitij Chauhan\u2019 NetworkResponseAdapter for the great error handling Attribution Requirements \u00b6 This wrapper is for the The Movie Database API. Using the data requires to attribute the data source. Same applies to JustWatch data if you're using their data. For more info read here: Link","title":"Quick start"},{"location":"#tmdb-kotlin","text":"This is the TMDb API documentation page for the TMDb wrapper TMDb-Kotlin written in and for Kotlin. I\u2019ve created the library for Android apps primarily but it can be also used in any Gradle project. Most of the functionality and callbacks are implemented (except some account related calls). The library is therefore WIP, so there might be breaking changes in the future (but I doubt it). The library is built on top of Retrofit2 for networking. If you\u2019ve got questions, suggestions or encounter any issues feel free to contact me via GitHub issues . I\u2019d be happy to help ;)","title":"TMDb-Kotlin"},{"location":"#setup","text":"","title":"Setup"},{"location":"#import-into-your-project","text":"This library uses JitPack.io so you\u2019ve to add the repo to your projects gradle file: repositories { maven { url \"https://jitpack.io\" } } Then, on app level add the library: dependencies { implementation \"com.github.vkay94:TMDb-Kotlin:{latest_version}\" // This module uses the ThreetenABP library to ensure LocalDate support in // Android versions below API 26 so you should use this as well for // using dates. implementation \"com.jakewharton.threetenabp:threetenabp:1.3.0\" }","title":"Import into your project"},{"location":"#initialize-the-instance","text":"Basic initialization: TMDb . init ( API_KEY [, V4_AUTH_KEY ]) // [] = optional In Android applications it is best-practice to initialize the instance directly within App to make use of Kotlin\u2019s objects, so the instance can be used in the whole app directly. App.kt class App : Application () { override fun onCreate () { TMDb . init ( API_KEY ) // or TMDb.init(YOUR_API_KEY, V4_AUTH_KEY) for authentication } } AndroidManifest.xml <manifest ... > <uses-permission android:name= \"android.permission.INTERNET\" /> <application android:name= \".App\" ... > </application> </manifest>","title":"Initialize the instance"},{"location":"#making-requests","text":"At the moment all calls are suspended and require to be called in Kotlin Coroutines. An overview of how to use them can be found here: Composing suspending functions . They\u2019re also wrapped in NetworkResponse s so you can react for errors easily or access the data directly.","title":"Making requests"},{"location":"#examples","text":"","title":"Examples"},{"location":"#searching-with-error-handling","text":"There are four cases which the response can take value of: Success , ServerError , NetworkError and UnknownError . For more info you should take a look here . fun main () = runBlocking { TMDb . init ( \"YOUR_API_KEY\" ) when ( val response = TMDb . searchService . tv ( \"Black Clover\" )) { // Type: NetworkResponse<TmdbPage<TmdbShow.Slim>, TmdbError.DefaultError> is NetworkResponse . Success -> { val searchPage : TmdbPage < TmdbShow . Slim > = response . body if ( searchPage . totalResults > 0 ) { println ( \"First result's title: ${searchPage.results[0].title}\" ) } } is NetworkResponse . ServerError -> { val errorBody : TmdbErrorResponse ? = response . body println ( \"ServerError: Message = ${errorBody?.message}\" ) } is NetworkResponse . NetworkError -> { val error : IOException = response . error println ( \"NetworkError: Message = ${error.message}\" ) } is NetworkResponse . UnknownError -> { val error : Throwable = response . error println ( \"UnknownError: Message = ${error.message}\" ) } } }","title":"Searching with error handling"},{"location":"#searching-with-direct-access","text":"You can also access the response directly without checking for the NetworkResponse type by calling invoke() . In this case the object might by null : fun main () = runBlocking { TMDb . init ( \"YOUR_API_KEY\" ) val searchPage : TmdbPage < TmdbShow . Slim >? = TMDb . searchService . tv ( \"Black Clover\" ). invoke () searchPage ?. let { if ( searchPage . totalResults > 0 ) { println ( \"First result: ${searchPage.results[0].title}\" ) } } }","title":"Searching with direct access"},{"location":"#next-steps","text":"This introduction is pretty briefly. For some more practice scenarios you can either look into the Recipes page on the left or into the tests folder on Github here .","title":"Next steps"},{"location":"#used-libraries-and-thanks","text":"Retrofit2 by Square Moshi by Square NetworkResponseAdapter by Kshitij Chauhan ThreeTenABP by Jake Wharton Thanks go to The Movie Database for the API Uwe Trottmann\u2019s tmdb-java for the basic idea and some structuring elements Kshitij Chauhan\u2019 NetworkResponseAdapter for the great error handling","title":"Used libraries and thanks"},{"location":"#attribution-requirements","text":"This wrapper is for the The Movie Database API. Using the data requires to attribute the data source. Same applies to JustWatch data if you're using their data. For more info read here: Link","title":"Attribution Requirements"},{"location":"design/","text":"Design \u00b6 I\u2019m a friend of well structured / conclusive code and intuitive usage. So I tried to design the library in such way by JSON deserialization into objects instead of Strings for more out-of-the-box functionalities, combining similar JSON structures and reduce nested objects as much as possible to lighten the library and ensuring intuitive and natural workflow by - for example - returning lists directly. Naming conventions \u00b6 Some data retrieved from the API isn\u2019t immediately apparent in my opinion - for example iso_639_1 but you won\u2019t probably think of it as the language tag on your first spot. So I named such data fields into more human language and also some query parameters: TMDb field / query parameter Named in this library Example iso_639_1 languageCode de (German) iso_3166_1 countryCode DE (Germany) language language de or de-DE (German / Germany) region languageCode de (German) Recurrent classes & concepts \u00b6 Slim variants \u00b6 Slims are classes with less data in comparision to its normal variant. They\u2019re used in search results (= lists), so TmdbMovie.Slim doesn\u2019t contain data such as production countries and companies for example. TmdbPage<Type> \u00b6 This class represents a page of items for the given type, for example TmdbPage<TmdbMovie.Slim> . Pages are used primarily in searches or e.g. movie/tv show recommendations where you can specify the actual page. \u2192 Doc TmdbImage \u00b6 TmdbImage is used for all image paths including poster, backdrop and still paths. If the images are standalone - for example a poster or backdrop as part of a movie - they don\u2019t contain additional data like width and height . These are available for concrete calls only like <Service>.posters(id) or if AppendToResponse.Item.IMAGE is used. The class supports the method get(Quality) which produces the full link to the image resource. \u2192 Doc TmdbDate \u00b6 TmdbDate is a wrapper class for LocalDate which supports the method localize(Locale, Format) to return a date string according to the user\u2019s location. \u2192 Doc TmdbError \u00b6 \u2192 Doc AppendToResponse \u00b6 Some classes support optional addable data like videos or images which can be retrieved directly in the details call. Classes supporting the functionality: TmdbShow , TmdbSeason , TmdbEpisode , TmdbMovie , TmdbPerson For more info how it works you should look on the official TMDb page and in Recipes for examples. \u2192 Doc Enumerations \u00b6 All available enumerations are listed here: Github","title":"Design"},{"location":"design/#design","text":"I\u2019m a friend of well structured / conclusive code and intuitive usage. So I tried to design the library in such way by JSON deserialization into objects instead of Strings for more out-of-the-box functionalities, combining similar JSON structures and reduce nested objects as much as possible to lighten the library and ensuring intuitive and natural workflow by - for example - returning lists directly.","title":"Design"},{"location":"design/#naming-conventions","text":"Some data retrieved from the API isn\u2019t immediately apparent in my opinion - for example iso_639_1 but you won\u2019t probably think of it as the language tag on your first spot. So I named such data fields into more human language and also some query parameters: TMDb field / query parameter Named in this library Example iso_639_1 languageCode de (German) iso_3166_1 countryCode DE (Germany) language language de or de-DE (German / Germany) region languageCode de (German)","title":"Naming conventions"},{"location":"design/#recurrent-classes-concepts","text":"","title":"Recurrent classes &amp; concepts"},{"location":"design/#slim-variants","text":"Slims are classes with less data in comparision to its normal variant. They\u2019re used in search results (= lists), so TmdbMovie.Slim doesn\u2019t contain data such as production countries and companies for example.","title":"Slim variants"},{"location":"design/#tmdbpagetype","text":"This class represents a page of items for the given type, for example TmdbPage<TmdbMovie.Slim> . Pages are used primarily in searches or e.g. movie/tv show recommendations where you can specify the actual page. \u2192 Doc","title":"TmdbPage&lt;Type&gt;"},{"location":"design/#tmdbimage","text":"TmdbImage is used for all image paths including poster, backdrop and still paths. If the images are standalone - for example a poster or backdrop as part of a movie - they don\u2019t contain additional data like width and height . These are available for concrete calls only like <Service>.posters(id) or if AppendToResponse.Item.IMAGE is used. The class supports the method get(Quality) which produces the full link to the image resource. \u2192 Doc","title":"TmdbImage"},{"location":"design/#tmdbdate","text":"TmdbDate is a wrapper class for LocalDate which supports the method localize(Locale, Format) to return a date string according to the user\u2019s location. \u2192 Doc","title":"TmdbDate"},{"location":"design/#tmdberror","text":"\u2192 Doc","title":"TmdbError"},{"location":"design/#appendtoresponse","text":"Some classes support optional addable data like videos or images which can be retrieved directly in the details call. Classes supporting the functionality: TmdbShow , TmdbSeason , TmdbEpisode , TmdbMovie , TmdbPerson For more info how it works you should look on the official TMDb page and in Recipes for examples. \u2192 Doc","title":"AppendToResponse"},{"location":"design/#enumerations","text":"All available enumerations are listed here: Github","title":"Enumerations"},{"location":"future-plans/","text":"Plans \u00b6 Ideas \u00b6 Support more Retrofit2 types, e.g Call , RxJava (Single + Completable) by using artifacts ToDo\u2019s \u00b6 Implement missing endpoints (except such like changes and rating (=> niche))","title":"Future plans / ToDo's"},{"location":"future-plans/#plans","text":"","title":"Plans"},{"location":"future-plans/#ideas","text":"Support more Retrofit2 types, e.g Call , RxJava (Single + Completable) by using artifacts","title":"Ideas"},{"location":"future-plans/#todos","text":"Implement missing endpoints (except such like changes and rating (=> niche))","title":"ToDo's"},{"location":"recipes/","text":"Recipes \u00b6 In this section I\u2019ll show you some examples and customizations which can be done with this library. Customization \u00b6 Caching \u00b6 Since the API data isn\u2019t updating that often it wouldn\u2019t be neccessary to fetch the same resource over and over. You can set the cache time interval and the condition for being connected to the network: // Setting condition or passing null to disable caching (default: null) TMDb . onlineCondition { return InternetUtility . isConnectedToNetwork () } // Duration to use cached data if connected to network (default: 2 hours) TMDb . onlineCache ( /* duration */ 2 , /* unit */ TimeUnit . HOURS ) // Duration to use cached data if disconnected from network (default: 2 days) TMDb . offlineCache ( /* duration */ 1 , /* unit */ TimeUnit . DAYS ) Modify requests before calling \u00b6 By default requests support caching but you can add your own modifications by using TMDbInterceptor if you\u2019d like: val customInterceptor = TMDbInterceptor ( \"YOUR_KEY\" , \"\" ) { requestBuilder -> requestBuilder . addHeader ( \"headerName\" , \"value\" ) // or a custom offline handling } TMDb . tmdbInterceptor = customInterceptor TMDb . init ( \"YOUR_KEY\" )","title":"Recipes"},{"location":"recipes/#recipes","text":"In this section I\u2019ll show you some examples and customizations which can be done with this library.","title":"Recipes"},{"location":"recipes/#customization","text":"","title":"Customization"},{"location":"recipes/#caching","text":"Since the API data isn\u2019t updating that often it wouldn\u2019t be neccessary to fetch the same resource over and over. You can set the cache time interval and the condition for being connected to the network: // Setting condition or passing null to disable caching (default: null) TMDb . onlineCondition { return InternetUtility . isConnectedToNetwork () } // Duration to use cached data if connected to network (default: 2 hours) TMDb . onlineCache ( /* duration */ 2 , /* unit */ TimeUnit . HOURS ) // Duration to use cached data if disconnected from network (default: 2 days) TMDb . offlineCache ( /* duration */ 1 , /* unit */ TimeUnit . DAYS )","title":"Caching"},{"location":"recipes/#modify-requests-before-calling","text":"By default requests support caching but you can add your own modifications by using TMDbInterceptor if you\u2019d like: val customInterceptor = TMDbInterceptor ( \"YOUR_KEY\" , \"\" ) { requestBuilder -> requestBuilder . addHeader ( \"headerName\" , \"value\" ) // or a custom offline handling } TMDb . tmdbInterceptor = customInterceptor TMDb . init ( \"YOUR_KEY\" )","title":"Modify requests before calling"},{"location":"services/","text":"Services \u00b6 Currently around 90% of the endoints are already usable. In the following you\u2019ll see the table of supported services and all necessary info to them. Brief examples to calls can be found on the given test links or on the Recipes page. \u2192 All supported services (GitHub) Fetch services only \u00b6 SearchService \u00b6 Library Official dcumentation Tests / examples Github TMDb Github MovieService \u00b6 Library Official dcumentation Tests / examples Github TMDb Github Auth and account services* \u00b6 *V4 auth key required AuthService \u00b6 Library Official dcumentation Tests / examples Github TMDb Github","title":"Services"},{"location":"services/#services","text":"Currently around 90% of the endoints are already usable. In the following you\u2019ll see the table of supported services and all necessary info to them. Brief examples to calls can be found on the given test links or on the Recipes page. \u2192 All supported services (GitHub)","title":"Services"},{"location":"services/#fetch-services-only","text":"","title":"Fetch services only"},{"location":"services/#searchservice","text":"Library Official dcumentation Tests / examples Github TMDb Github","title":"SearchService"},{"location":"services/#movieservice","text":"Library Official dcumentation Tests / examples Github TMDb Github","title":"MovieService"},{"location":"services/#auth-and-account-services","text":"*V4 auth key required","title":"Auth and account services*"},{"location":"services/#authservice","text":"Library Official dcumentation Tests / examples Github TMDb Github","title":"AuthService"}]}